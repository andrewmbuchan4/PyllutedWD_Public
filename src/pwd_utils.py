#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse as ap
import configparser

from pathlib import Path

abbreviations = {  # Necessary to keep file names below 100 characters! (Fixed in v3.11 of multinest, but I use v3.10)
    'Earthlike': 'EL',
    'NonEarthlike': 'NEL',
    'MantleOnly': 'MO',
    'Default': 'D',
    'TestPrior': 'TP',
    'HighPressure': 'HP',
    'LowPressure': 'LP',
    'RaisedPressure': 'RP',
    'EarthMantle': 'EM',
    'Meteorite': 'M'
}

hierarchy_abbreviations = {  # Necessary to keep file names below 100 characters! (Fixed in v3.11 of multinest, but I use v3.10)
    'Hierarchy_Basic': 'HB',
    'Hierarchy_Default': 'HD',
    'Hierarchy_Test': 'HT',
    'Hierarchy_Test2': 'HT2',
    'Hierarchy_Test3': 'HT3',
    'Hierarchy_OM': 'HOM',
    'Hierarchy_OM_reduced': 'HOMr',
    'Hierarchy_Earth': 'HE',
    'Hierarchy_Meteorite': 'HM'
}

# I assume that files will not be moved around!
def get_path_to_parent():
    # Path(__file__) is the path of this file
    # resolve() returns the absolute path
    # parents[1] is the path of the parent directory
    return str(Path(__file__).resolve().parents[1]) + '/'

def get_path_to_data():
    return get_path_to_parent() + 'data/'

def get_path_to_feni():
    return get_path_to_parent() + 'feni_src/feni/'

def get_path_to_src():
    return get_path_to_parent() + 'src/'

def get_path_to_default_graphs():
    return get_path_to_src() + 'graphs/'

def get_path_to_utils():
    return get_path_to_parent() + 'utils/'

def get_path_to_original_src():
    return get_path_to_parent() + 'original_codebase/'

config = configparser.ConfigParser()
config.read(get_path_to_src() + 'configuration.ini')
config.sections()

def get_path_to_output_base_dir():
    toret = config.get('Paths', 'output_dir')
    if not toret.endswith('/'):
        toret += '/'
    return toret

def get_path_to_pipeline_base_dir():
    return get_path_to_output_base_dir() + 'pipeline/'

def get_path_to_pylluted_dir():
    return get_path_to_output_base_dir() + 'r/' # Keeping this short to fit in 100 characters

def get_path_to_historical_output_dir():
    # This will only be useful if you have the output from Harrison et al. 2021 in this directory - I can send this, or it can be generated by running the PWDCode.py script in an earlier version of the codebase
    return get_path_to_output_base_dir() + 'output_for_harrison2021/'

def parse_command_line_arguments():
    parser = ap.ArgumentParser(description='Manager Arguments')
    parser.add_argument(
        dest='wd_data_filename',
        type=str,
        help='White Dwarf abundances, errors and sinking timescales (will look in ' + get_path_to_data() + ' for a file of this name)'
    )
    parser.add_argument(
        dest='stellar_compositions_filename',
        type=str,
        help='Stellar compositions file name (will look in ' + get_path_to_data() + ' for a file of this name)'
    )
    parser.add_argument(
        dest='n_live_points',
        type=int,
        help='Number of live points to run models with'
    )
    parser.add_argument(
        dest='enhancement_model',
        type=str,
        help='Enhancement model name'
    )
    #parser.add_argument(
    #    dest='base_dir',
    #    type=str,
    #    help='Directory to store output'
    #)
    parser.add_argument(
        '--seed',
        default=-1,
        dest='seed',
        type=int,
        help='Seed for random number generation. Should be set to -1 for purposes other than testing'
    )
    parser.add_argument(
        dest='pollution_model_names',
        type=str,
        help='Pollution model names, separated by spaces',
        nargs='+'
    )
    parsed_arguments = parser.parse_args()
    return parsed_arguments

def main():
    print('Source directory is: ' + get_path_to_parent())
    print('Looking for input data in: ' + get_path_to_data())
    print('Looking for partitioning data in: ' + get_path_to_feni())
    print('Looking for utility scripts in: ' + get_path_to_utils())
    print('Looking for original code in: ' + get_path_to_original_src())
    print('Output directory: ' + get_path_to_output_base_dir())
    print('Will put synthetic_pipeline output in: ' + get_path_to_pipeline_base_dir())
    print('Will put PyMultiNest output files + csv dumps in: ' + get_path_to_output_statfiles_dir())
    print('Will put graphs in: ' + get_path_to_output_graphs_dir())
    print('Old data in: ' + get_path_to_historical_output_dir())

if __name__ == '__main__':
    main()
